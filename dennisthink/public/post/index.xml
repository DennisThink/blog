<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 浮生笔记</title>
    <link>https://www.dennisthink.com/post/</link>
    <description>Recent content in Posts on 浮生笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 19 Sep 2023 21:38:52 +0800</lastBuildDate><atom:link href="https://www.dennisthink.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>友情链接</title>
      <link>https://www.dennisthink.com/friendlink/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/friendlink/</guid>
      <description>china-personal-it-blog 中国it从业者的个人博客 收录标准: 原创文章占比超过90% HTTPS优先 列表 左耳朵耗子 余晟 丁宇 徐宥 申旻 小辉 冯冬 Phodal Huang 70后中年大叔 善用佳软 云风</description>
    </item>
    
    <item>
      <title>怎样赚钱----我理解的商业模式</title>
      <link>https://www.dennisthink.com/post/2023/how-to-earn-money-my-understanding-of-business/</link>
      <pubDate>Tue, 19 Sep 2023 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2023/how-to-earn-money-my-understanding-of-business/</guid>
      <description>怎样赚钱&amp;mdash;-我理解的商业模式 所谓赚钱就是把一种物品或者服务卖给对方，并从对方那里获取金钱的一种行为。而要产生这样的行为，需要买卖</description>
    </item>
    
    <item>
      <title>使用POP3协议连接到163邮箱</title>
      <link>https://www.dennisthink.com/post/2023/use-pop3-to-read-email-from-163-mail-server/</link>
      <pubDate>Fri, 15 Sep 2023 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2023/use-pop3-to-read-email-from-163-mail-server/</guid>
      <description>使用pop3 协议获取邮件 1. 连接到服务器 telnet 123.126.97.116 110 2. 服务器应答 +OK POP3 ready 3. 发送用户名 USER ${YOUR_USER_NAME} 4. 服务器应答 +OK 5. 发送密码 PASS ${YOUR_PASS_WORD} 6. 服务器应答 +OK 50 message(s) [3505839 byte(s)] 7. 使用STA</description>
    </item>
    
    <item>
      <title>用户界面与跨平台</title>
      <link>https://www.dennisthink.com/post/2023/user-interface-and-cross-platform/</link>
      <pubDate>Wed, 23 Aug 2023 21:41:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2023/user-interface-and-cross-platform/</guid>
      <description>因为个人的原因，我把工作环境切换到了Ubuntu下，发现没有一个好用的邮件客户端，后来安装了Windows虚拟机，用Foxmail也不太方便</description>
    </item>
    
    <item>
      <title>使用telnet通过IMAP协议读取QQ邮箱</title>
      <link>https://www.dennisthink.com/post/2023/use_telnet_get_email_of_qq_by_imap_protocal/</link>
      <pubDate>Sat, 13 May 2023 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2023/use_telnet_get_email_of_qq_by_imap_protocal/</guid>
      <description>使用telnet通过IMAP协议读取QQ邮箱 1. 连接到QQ邮箱的IMAP服务器 在命令行窗口执行: telnet imap.qq.com 143 Server: * OK [CAPABILITY IMAP4 IMAP4rev1 ID AUTH=PLAIN AUTH=LOGIN AUTH=XOAUTH2 NAMESPACE] QQMail XMIMAP4Server ready 看到上面这条</description>
    </item>
    
    <item>
      <title>信息成本-----从ChatGPT到情报学</title>
      <link>https://www.dennisthink.com/post/2023/information-cost-from-chatgpt-to-information-science/</link>
      <pubDate>Mon, 10 Apr 2023 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2023/information-cost-from-chatgpt-to-information-science/</guid>
      <description>随着ChatGPT更新到了4.0版本，百度的文心一言也推出了，阿里也推出了通义千问，人工智能再一次火了。计算机技术的发展，计算能力的提升了带</description>
    </item>
    
    <item>
      <title>买断制到订阅制----兼谈消费频次</title>
      <link>https://www.dennisthink.com/post/2023/buyout-vs-rent/</link>
      <pubDate>Wed, 11 Jan 2023 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2023/buyout-vs-rent/</guid>
      <description>最早引起这个话题的是，在知乎上看到notability从买断制变为订阅制而引起的一系列风波。之前由看到EdrawMax被万兴收购,到去理发，</description>
    </item>
    
    <item>
      <title>我眼中的CSDN</title>
      <link>https://www.dennisthink.com/post/2023/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84csdn/</link>
      <pubDate>Wed, 11 Jan 2023 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2023/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84csdn/</guid>
      <description>得知邹欣老师加盟了CSDN，我心里吃了一惊。在确定事实无误以后，决定写篇文章来聊聊我的感想。 1. 我认识的CSDN 我是在2011年左右注册CSD</description>
    </item>
    
    <item>
      <title>迁移博客内容到静态博客</title>
      <link>https://www.dennisthink.com/post/2023/transform-blog-to-static-blog/</link>
      <pubDate>Tue, 10 Jan 2023 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2023/transform-blog-to-static-blog/</guid>
      <description>迁移博客内容到静态博客 2023年的第一件事就是将博客从wordpress迁移到了hugo,也就是从动态博客迁移到了静态博客。还有就是把之前在</description>
    </item>
    
    <item>
      <title>Hugo使用Jane主题支持搜索实现</title>
      <link>https://www.dennisthink.com/post/2023/use-hugo-to-generate-blog-and-jane-as-theme/</link>
      <pubDate>Mon, 02 Jan 2023 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2023/use-hugo-to-generate-blog-and-jane-as-theme/</guid>
      <description>操作系统：Windows7 64Bit Ultimate版本。 1. 安装Hugo 从hugo官网下载Hugo并安装。 Hugo官网 2. 添加Hugo.exe 到PAT</description>
    </item>
    
    <item>
      <title>C语言和Lua的相互调用示例代码</title>
      <link>https://www.dennisthink.com/post/2022/08/c-lua-call-each-other-code/</link>
      <pubDate>Wed, 17 Aug 2022 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2022/08/c-lua-call-each-other-code/</guid>
      <description>C语言和Lua的相互调用示例代码 本代码参考博客: https://lucasklassmann.com/blog/2019-02-02-how-to-embeddeding-lua-in-c/ /** * @file luaLearn.c * @brief C and Lua call Learn Demo * @version 0.1 * @date 2022-08-19 * * @copyright Copyright (c) 2022 * */ //参考文档 //https://lucasklassmann.com/blog/2019-02-02-how-to-embeddeding-lua-in-c/ #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;lua.h&amp;gt; #include &amp;lt;lualib.h&amp;gt; #include &amp;lt;lauxlib.h&amp;gt; //基本</description>
    </item>
    
    <item>
      <title>不同产业的分析</title>
      <link>https://www.dennisthink.com/post/2022/01/analysis-on-different-industry/</link>
      <pubDate>Mon, 17 Jan 2022 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2022/01/analysis-on-different-industry/</guid>
      <description>我对第一、第二、第三产业的理解 我们一般习惯把产业分为第一产业、第二产业、第三产业，第一产业主要包括农业、畜牧业、渔业、矿产等，第二产业主要包</description>
    </item>
    
    <item>
      <title>从放逐之城看经济学</title>
      <link>https://www.dennisthink.com/post/2022/01/thinking-of-economic-about-game-banished/</link>
      <pubDate>Mon, 17 Jan 2022 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2022/01/thinking-of-economic-about-game-banished/</guid>
      <description>从放逐之城看经济学 最近一周玩了一个叫做《放逐之城》的游戏，颇有计划经济的感觉，而且模型相对简单，下文就把我的理解写下来，算是一个记录吧。 1. 主</description>
    </item>
    
    <item>
      <title>回首2021,展望2022</title>
      <link>https://www.dennisthink.com/post/2022/01/review-2021-forward-2022/</link>
      <pubDate>Sun, 02 Jan 2022 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2022/01/review-2021-forward-2022/</guid>
      <description>回首2021,展望2022 2021年刚刚过去，2022年如期到来，在这辞旧迎新的日子里，又到了一年一度的总结时间了。虽然不是很有想写的冲动，</description>
    </item>
    
    <item>
      <title>游戏中的经济学</title>
      <link>https://www.dennisthink.com/post/2021/the-economic-in-games/</link>
      <pubDate>Sat, 02 Jan 2021 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2021/the-economic-in-games/</guid>
      <description>游戏中的经济学 总结我玩过的游戏,我将游戏主要分为3种类型。 1. 单一无限资源 在dota中,所有的物品购买都需要金币,而金币的产生有两种主要的方式</description>
    </item>
    
    <item>
      <title>Windows获取网络地址、子网掩码等</title>
      <link>https://www.dennisthink.com/post/2018/get-net-addr-and-subnet-mask-on-windows/</link>
      <pubDate>Fri, 07 Feb 2020 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2018/get-net-addr-and-subnet-mask-on-windows/</guid>
      <description>#include &amp;lt;winsock2.h&amp;gt; #include &amp;lt;iphlpapi.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #pragma comment(lib, &amp;#34;IPHLPAPI.lib&amp;#34;) #define MALLOC(x) HeapAlloc(GetProcessHeap(), 0, (x)) #define FREE(x) HeapFree(GetProcessHeap(), 0, (x)) /* Note: could also use malloc() and free() */ int __cdecl main() { /* Declare and initialize variables */ // It is possible for an adapter to have multiple // IPv4 addresses, gateways, and secondary WINS servers // assigned to the adapter. // // Note that this sample code</description>
    </item>
    
    <item>
      <title>-fsanitize=address 参数作用</title>
      <link>https://www.dennisthink.com/post/2019/01/the-use-of-fsanitize-address-option/</link>
      <pubDate>Sun, 20 Jan 2019 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2019/01/the-use-of-fsanitize-address-option/</guid>
      <description>在C++的开发中，我们经常会遇到很多和内存有关的错误。其实使用编译器的一些检查功能，可以帮助我们一定程度上减少这样的错误,下面我们介绍一下 -fsanitize=address</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 编译器支持标准判断</title>
      <link>https://www.dennisthink.com/post/2014/%E7%9F%A9%E5%BD%A2%E9%87%8D%E5%8F%A0%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Sun, 20 Jan 2019 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2014/%E7%9F%A9%E5%BD%A2%E9%87%8D%E5%8F%A0%E6%A3%80%E6%B5%8B/</guid>
      <description>// 矩形重叠类型注释 // CORNER_OVERLAP // -------------------- // | | // | | // | **********|********** // | * | * // | * | * // ---------*---------| * // * * // * * // ********************* // // ANCHOR_OVERLAP // ---- // | | // | | // *******|**|******* // * | | * // * | | * // * ---- *</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 编译器支持标准判断</title>
      <link>https://www.dennisthink.com/post/2019/01/cpp-compiler-support-standard-verify/</link>
      <pubDate>Sun, 20 Jan 2019 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2019/01/cpp-compiler-support-standard-verify/</guid>
      <description>C++ 主要的历史版本有 C++98(1.0) C++03(TR1) C++11 C++14 C++17 C++20. 在GCC++和clang++编译器下，可以使用下面的代码进行判断。 1 2 3 4 5 6 7 8 9 10 #include &amp;lt;iostream&amp;gt; int main(int argc,char * argv[]) { #ifdef __cplusplus std::cout &amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 关键词(二)之逻辑判断和位运算</title>
      <link>https://www.dennisthink.com/post/2019/01/c&#43;&#43;%E5%85%B3%E9%94%AE%E8%AF%8D3%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sun, 20 Jan 2019 21:38:52 +0800</pubDate>
      
      <guid>https://www.dennisthink.com/post/2019/01/c&#43;&#43;%E5%85%B3%E9%94%AE%E8%AF%8D3%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>逻辑判断 关键词 含义 等价逻辑 举例 not 逻辑非 ! not true == false not_eq 不等于,等价于 != 5 not_eq 4 == true and 逻辑与 &amp;amp;&amp;amp; bAdded &amp;amp;&amp;amp; bSetted or 逻辑或 | 位操作和赋值 关键词 含义 等价逻辑 举例 xor 异</description>
    </item>
    
  </channel>
</rss>
